// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagement.API.Data.Context;

#nullable disable

namespace SchoolManagement.API.Migrations
{
    [DbContext(typeof(SchoolSysDBContext))]
    [Migration("20250423210432_RelationsAttendanceChanged")]
    partial class RelationsAttendanceChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassTeacher", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("ClassId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassTeacher");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            ClassId = 2,
                            TeacherId = 2
                        },
                        new
                        {
                            ClassId = 3,
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Attendances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2025, 4, 22),
                            Present = true,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2025, 4, 21),
                            Present = false,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2025, 4, 20),
                            Present = true,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2025, 2, 20),
                            Present = true,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2025, 4, 14),
                            Present = false,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(2025, 1, 9),
                            Present = true,
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Divition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 30,
                            Course = "4th Grade",
                            Divition = "A"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 25,
                            Course = "5th Grade",
                            Divition = "B"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 28,
                            Course = "6th Grade",
                            Divition = "C"
                        });
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2025, 4, 22),
                            StudentId = 1,
                            SubjectId = 1,
                            Value = 85
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2025, 4, 20),
                            StudentId = 2,
                            SubjectId = 2,
                            Value = 90
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2025, 4, 18),
                            StudentId = 3,
                            SubjectId = 3,
                            Value = 75
                        });
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MobileNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Calle Falsa, Paraná",
                            BirthDate = new DateOnly(2005, 6, 15),
                            ClassId = 1,
                            Email = "sofia.perez@example.com",
                            MobileNumber = 5493415123456L,
                            Name = "Sofía",
                            Password = "hashedpassword1",
                            Surname = "Pérez"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Avenida Siempre Viva, Paraná",
                            BirthDate = new DateOnly(2006, 10, 22),
                            ClassId = 2,
                            Email = "lucas.ramirez@example.com",
                            MobileNumber = 5493415234567L,
                            Name = "Lucas",
                            Password = "hashedpassword2",
                            Surname = "Ramírez"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Boulevard Independencia, Paraná",
                            BirthDate = new DateOnly(2004, 3, 8),
                            ClassId = 3,
                            Email = "camila.gonzalez@example.com",
                            MobileNumber = 5493415345678L,
                            Name = "Camila",
                            Password = "hashedpassword3",
                            Surname = "González"
                        });
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Physics"
                        },
                        new
                        {
                            Id = 3,
                            Title = "History"
                        });
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MobileNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Calle Falsa, Buenos Aires",
                            BirthDate = new DateOnly(2000, 5, 20),
                            Email = "juan.gonzalez@example.com",
                            MobileNumber = 541112345678L,
                            Name = "Juan",
                            Password = "hashedpassword1",
                            Surname = "González"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Avenida Siempre Viva, Córdoba",
                            BirthDate = new DateOnly(2001, 8, 15),
                            Email = "maria.fernandez@example.com",
                            MobileNumber = 541198765432L,
                            Name = "María",
                            Password = "hashedpassword2",
                            Surname = "Fernández"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Boulevard Independencia, Mendoza",
                            BirthDate = new DateOnly(1999, 12, 10),
                            Email = "carlos.martinez@example.com",
                            MobileNumber = 541165432987L,
                            Name = "Carlos",
                            Password = "hashedpassword3",
                            Surname = "Martínez"
                        });
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectTeacher");

                    b.HasData(
                        new
                        {
                            SubjectId = 3,
                            TeacherId = 1
                        },
                        new
                        {
                            SubjectId = 2,
                            TeacherId = 2
                        },
                        new
                        {
                            SubjectId = 1,
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("ClassTeacher", b =>
                {
                    b.HasOne("SchoolManagement.API.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.API.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Attendance", b =>
                {
                    b.HasOne("SchoolManagement.API.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId");

                    b.HasOne("SchoolManagement.API.Models.Teacher", "Teacher")
                        .WithMany("Attendances")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagement.API.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.API.Models.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Student", b =>
                {
                    b.HasOne("SchoolManagement.API.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.HasOne("SchoolManagement.API.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.API.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Subject", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolManagement.API.Models.Teacher", b =>
                {
                    b.Navigation("Attendances");
                });
#pragma warning restore 612, 618
        }
    }
}
